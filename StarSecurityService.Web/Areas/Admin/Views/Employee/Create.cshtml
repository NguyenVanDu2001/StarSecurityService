@model StarSecurityService.ApplicationCore.Entities.Employyee
@using StarSecurityService.Application.Commons.Dto;
@{
    Layout = "~/Areas/Admin/Views/Shared/_MainLayoutAdmin.cshtml";

    List<SelectListItem> listcat = new List<SelectListItem>();
    listcat.Add(new SelectListItem
    {
        Text = "Male",
        Value = "True",

    });
    listcat.Add(new SelectListItem { Text = "Female", Value = "False" });

    List<SelectListItem> ListStatus = new List<SelectListItem>();
    ListStatus.Add(new SelectListItem { Value = "0", Text = "Active" });
    ListStatus.Add(new SelectListItem { Value = "1", Text = "No Active" });
    int order = 0;
}
@section style{
    <style>
        .image-upload > input {
            visibility: hidden;
            width: 0;
            height: 0
        }

        table thead {
            background-color: gray;
        }

        table tfoot {
            background-color: #eaeaea;
            cursor: pointer;
            color: blue;
        }

        label.error {
            color: red
        }

        .font-red {
            color: red
        }

        #home .col-md-6 div {
            margin-top: 12px;
            width: 85%;
        }
    </style>
}


<div class="row">
    <div class="col-xs-12 col-md-12 col-lg-12">
        <form method="post" id="formEmployee" enctype="multipart/form-data">
            <div class="panel panel-primary">
                <div class="panel-heading">@(Model.Id ==0 ? "Create Employee" : "Edit Employee")  </div>
                <br />
                <div class="form-group pull-right " style="margin-right :37px">
                    <div class="row">   
                        <div class="col-md-offset-2 col-md-3">
                            <button type="submit" class="btn btn-primary"><i class="fa fa-floppy-o" aria-hidden="true"></i> &nbsp; Save</button>
                        </div>
                        <div class="col-md-offset-2 col-md-3">
                            <a href="@Url.Action("Index", "Employee")" class="btn btn-danger"> <i class="fa fa-window-close" aria-hidden="true"></i> &nbsp; Cancel</a>
                        </div>
                    </div>
                </div>
                <br />
                <br />
                <div class="panel-body">
                    <ul class="nav nav-tabs">
                        <li class="active"><a href="#home" class="active" data-toggle="tab">HOME</a></li>
                        <li><a href="#info" data-toggle="tab">Servce Emoployee</a></li>
                    </ul>

                    <div class="tab-content">
                        <div class="tab-pane active" id="home">
                            <input type="hidden" name="Id" value="@Model.Id" />
                            <div class="row">
                                <div class="col-md-6">
                                    <div>
                                        <label for="psw"><span class="text-secondary ">User Name</span></label>
                                        @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                    </div>
                                    <div>
                                        <label for="psw"><span class="text-secondary ">Password</span></label>
                                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                    </div>
                                    <div>
                                        <label for="psw"><span class="text-secondary ">Email</span></label>
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div>
                                        <label for="Phone"><span class="text-secondary "> Phone</span></label>
                                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                    </div>
                                    <div>
                                        <label for="Address"><span class="text-secondary ">Address</span></label>
                                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                            <hr />
                            <div class="row">
                                <div class="col-md-6">
                                    <div>
                                        <label for="Salary"><span class="text-secondary "> Salary</span></label>
                                        @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
                                    </div>

                                    <div>
                                        <label for="BirthDay"><span class="text-secondary "> BirthDay</span></label>
                                        <input type="date" class="form-control" id="BirthDay" name="BirthDay" value="@Model.BirthDay.ToString("yyyy-MM-dd")" />
                                        @Html.ValidationMessageFor(model => model.BirthDay, "", new { @class = "text-danger" })
                                    </div>
                                    <div>
                                        <label for="Bonus"><span class="text-secondary "> Bonus</span></label>
                                        @Html.EditorFor(model => model.Bonus, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Bonus, "", new { @class = "text-danger" })
                                    </div>
                                    <div>
                                        <label for="Bonus"><span class="text-secondary "> Upload File</span></label>
                                        <input id="file-input" type="file" class="form-control" value="@Model.Image" />
                                    </div>
                                </div>


                                <div class="col-md-6">
                                    <div>
                                        <label for="Grander"><span class="text-secondary "> Grander</span></label>
                                        @Html.DropDownListFor(model => model.Sex, listcat, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Sex, "", new { @class = "text-danger" })
                                    </div>

                                    <div>
                                        <label for="Grander"><span class="text-secondary "> Status</span></label>
                                        @Html.EditorFor(model => model.Status)
                                    </div>
                                    <div>
                                        <label for="Grander"><span class="text-secondary "> Branch</span></label>
                                        <select class=" form-control" id="BranchId" name="BranchId">
                                            <option value=""> Choose branch</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label for="Grander"><span class="text-secondary "> ServiceOffer</span></label>
                                        <select id="ServiceOffer" multiple class="form-control">
                                        </select>
                                    </div>

                                </div>

                                <div class="col-md-6">
                                    <div>
                                        <label for="Grander"><span class="text-secondary "> Achievement</span></label>
                                        <select id="Achievement" multiple class="form-control">
                                        </select>
                                    </div>

                                </div>
                            </div>

                        </div>
                        <div class="tab-pane" id="info">
                            <table class="table table-bordered table-condensed" id="tableServiceOffer">
                                <thead style="background-color:gray">
                                    <tr class="active">
                                        <th class="text-center">Order</th>
                                        <th class="text-center">Client</th>
                                        <th class="text-center">Service Offer</th>
                                        <th class="text-center">Start shift  </th>
                                        <th class="text-center">End shift  </th>
                                        <th class="text-center">Remove</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.ClientEmployees?.Any() == true)
                                    {
                                        foreach (var item in Model.ClientEmployees)
                                        {
                                            order++;
                                            <tr class="text-center">
                                                <td> @order.ToString("D2")</td>
                                                <td>
                                                    <select class="form-control select-client" data-id="">
                                                        <option value=""> -Choose client-</option>
                                                        @foreach (var client in (List<ComboboxCommonDto>)ViewBag.ListClient)
                                                        {
                                                            <option @(client.Value == item.ClientId ? "selected" : "") value="@client.Value"> @client.Lable</option>

                                                        }
                                                    </select>
                                                </td>
                                                <td>
                                                    <select class="form-control select-service-offer">
                                                        <option value=""> -Choose serviceoffer-</option>
                                                        @foreach (var client in (List<ComboboxCommonDto>)ViewBag.ListServiceOffer)
                                                        {
                                                            <option @(client.Value == item.ServiceOfferId ? "selected" : "") value="@client.Value"> @client.Lable</option>

                                                        }
                                                    </select>
                                                </td>
                                                <td><input type="date" name="name" value="@item.ShiftStart.ToString("yyyy-MM-dd")" class="form-control" /></td>
                                                <td><input type="date" name="name" value="@item.ShiftEnd.ToString("yyyy-MM-dd")" class="form-control" /></td>
                                                <td>
                                                    <i class="fa fa-trash fa-2x" aria-hidden="true"></i>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        order++;    
                                        <tr class="text-center">
                                            <td> @order.ToString("D2")</td>
                                            <td>
                                                <select class="form-control select-client" data-id="">
                                                    <option value=""> -Choose client-</option>
                                                    @foreach (var client in (List<ComboboxCommonDto>)ViewBag.ListClient)
                                                    {
                                                        <option value="@client.Value"> @client.Lable</option>

                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <select class="form-control select-service-offer">
                                                    <option value=""> -Choose serviceoffer-</option>
                                                    @foreach (var client in (List<ComboboxCommonDto>)ViewBag.ListServiceOffer)
                                                    {
                                                        <option value="@client.Value"> @client.Lable</option>
                                                    }
                                                </select>
                                            </td>
                                            <td><input type="date" name="name" value="" class="form-control" /></td>
                                            <td><input type="date" name="name" value="" class="form-control" /></td>
                                            <td>
                                                <i class="fa fa-trash fa-2x" aria-hidden="true"></i>
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="6"> <i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp; Add row</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                    </div>



                    <div class="clearfix"></div>
                    <input type="hidden" name="name" id="lstEmployeeServiceOffered" value="@(ViewBag.ListIdServiceOffer)" />
                    <input type="hidden" name="name" id="lstEmployeeAchievement" value="@(ViewBag.ListIdAchi)" />
                </div>
            </div>
        </form>
    </div>
</div><!--/.row-->

@section scripts{
    <script src="~/Areas/Asset/js/JqueyValidate/jquery.validate.min.js"></script>
    <script>
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#blah').removeAttr("style").attr('src', e.target.result).height(120).width(120);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#file-input").change(function () {
            readURL(this);
        });

        var tableTab2 = {
            sheft: $("#tableServiceOffer"),
            elementCloneRowTbody: $("#tableServiceOffer > tbody > tr:first").clone(),
            intit: function () {
                this.event();
            },
            event: function () {
                this.addRow();
                this.deleteRow();
            },
            addRow: function () {
                tableTab2.sheft.find("tfoot tr").off("click").on("click", function () {
                    $("#tableServiceOffer > tbody > tr:first").clone().insertAfter('#tableServiceOffer tbody tr:last');
                    tableTab2.orderIndexTbody();
                })
            },
            deleteRow: function () {
                $(document).on("click", "#tableServiceOffer tbody tr td .fa-trash", function () {
                    if (confirm("Are you sure you want to delete?")) {
                        const $this = $(this);
                        $this.closest("tr").remove();
                        tableTab2.orderIndexTbody();
                    };
                })
            },
            orderIndexTbody: function () {
                tableTab2.sheft.find("tbody tr").each(function (i, e) {
                    $(this).find("td:eq(0)").text(Number(i) + 1)
                })
            }

        };
        let _id = $("input[name=Id]").val();
        function loadCombobox() {
            // Load combobox client table
            $.get("/Admin/Employee/LoadComboboxClient").done(function (data) {
                //if (data.StatusCode == 200) {
                //    var option = `<option value="">-- Choose client --</option>`;
                //    for (obj of data.Data) {
                //        option += `<option value="${obj.Value}">${obj.Lable}</option>`
                //    }
                //}
                //$("#tableServiceOffer tbody .select-client").html(option);

            })

            // Load combobox service
            $.get("/Admin/Employee/LoadComboboxService").done(function (data) {
                if (data.StatusCode == 200) {
                    let lisselected = "";
                    if (_id > 0) {
                         lisselected = JSON.parse($("#lstEmployeeServiceOffered").val());
                    }
                    let optionDefault;
                    for (obj of data.Data) {
                        let selected = "";
                        if (_id > 0) {
                            selected = lisselected.filter(x => x == obj.Value).length > 0 ? "selected" : "";
                        }
                        optionDefault += `<option ${selected} value="${obj.Value}">${obj.Lable}</option>`
                    }
                    $("#ServiceOffer").html(optionDefault);
                }
            })
            //Load combobox branch
            $.get("/Admin/Employee/LoadComboboxBranch").done(function (data) {
                if (data.StatusCode == 200) {
                    fillOptionSelect("#BranchId", data.Data, 'Choose branch',@Model.BranchId);

                }
            })
            //Load combobox achivement
            $.get("/Admin/Employee/LoadComboboxAchievemt")  .done(function (data) {
                if (data.Status != 2) {
                    let lisselected = "";
                    if (_id > 0) {
                         lisselected = JSON.parse($("#lstEmployeeAchievement").val());
                    }
                    let optionDefault;
                    for (obj of data.Data) {
                        let selected = "";
                        if (_id > 0) {
                             selected = lisselected.filter(x => x == obj.Value).length > 0 ? "selected" : "";
                        }
                        optionDefault += `<option ${selected} value="${obj.Value}">${obj.Lable}</option>`
                    }
                    $("#Achievement").html(optionDefault);



                    //fillOptionSelect("#Achievement", data.Data);
                }
            })

        }
        function fillOptionSelect(selector, data, textOptionDefault = undefined, valueSelected=0 ,listInt = []) {
            let optionDefault = "";
            if (textOptionDefault) {
                optionDefault = `<option value="">${textOptionDefault}</option>`;
            }
            for (obj of data) {
                let selected = obj.Value == valueSelected ? "selected" : "";
                optionDefault += `<option ${selected} value="${obj.Value}">${obj.Lable}</option>`
            }
            $(selector).html(optionDefault);
        }
        $.validator.addMethod(
            "phone",
            function (value, element) {
                /^(84|0[3|5|7|8|9])+([0-9]{8})\b$/.test(value);
            },
            "Use a valid username."
        );
        var $validateForm = {
            validate: $("#formEmployee").validate({
                rules: {
                    BranchId: "required",
                    Address: "required",

                    Password: {
                        required: true,

                    },
                    Achievement: "required",
                    Email: {
                        required: true,
                        email: true
                    },
                    BirthDay: "required",
                    Phone: {
                        required: true,
                        //  phone: true
                    },
                    Salary: "required",
                    UserName: "required"
                },
                messages: {
                    BranchId: "Please choose branch",
                    Address: "Please enter adress",
                    Password: {
                        required: "Please enter password ,can't be blank",
                    },
                    Achievement: "Please choose branch",
                    Email: {
                        required: "Please enter email ,can't be blank ",
                        email: "Please enter email in correct format"
                    },
                    BirthDay: "Please choose birth day ,can't be blank ",
                    UserName: "Please enter user name ,can't be blank",
                    Salary: "Please enter salary ,can't be blank",
                    Phone: {
                        required: "Please enter phone number ,can't be blank",
                        // phone: "Plese enter phone in correct format phone number"
                    }
                },
                submitHandler: function (form) {
                    debugger
                    $validateForm.ajaxSubmitForm(form);
                    // form.submit();
                }
            }),
            ajaxSubmitForm: function (form) {
                var formdatainput = {};
                $.map($("#formEmployee").serializeArray(), function (n, i) {
                    formdatainput[n['name']] = n['value'];
                });

                var fileUpload = $("#file-input").get(0);
                var files = fileUpload.files;

                // Create FormData object
                var formData = new FormData();

                // Looping over all files and add it to FormData object
                for (var i = 0; i < files.length; i++) {
                    formData.append(files[i].name, files[i]);
                }

                formData.append("serviceEmployee", JSON.stringify($validateForm.dataTab2()));
                formData.append("employyee", JSON.stringify(formdatainput));
                formData.append("listAchievement", JSON.stringify($("#Achievement").val()));
                formData.append("listServiceOffer", JSON.stringify($("#ServiceOffer").val()));
                console.log(formdatainput);
                debugger

                $.ajax({
                    url: '/Admin/Employee/submitForm',
                    type: "POST",
                    dataType: "Json",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: formData,
                    success: function (result) {
                        alert(result);
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });

                console.log(dataTab2);
            },
            dataTab2: function () {
                var dataTab2 = [];
                $("#info table tbody tr").each(function () {
                    let $this = $(this);
                    dataTab2.push({
                        clientId: $this.find("td:eq(1) select option:selected").val(),
                        serviceOfferId: $this.find("td:eq(2) select option:selected").val(),
                        startShift: $this.find("td:eq(3) input").val(),
                        endShift: $this.find("td:eq(4) input").val(),
                    })
                })
                return dataTab2;
            }
        }
        loadCombobox();
        tableTab2.intit()
        $validateForm.validate
           // (function () { tableTab2.intit(), loadCombobox(), $validateForm.validate })();

    </script>
}  