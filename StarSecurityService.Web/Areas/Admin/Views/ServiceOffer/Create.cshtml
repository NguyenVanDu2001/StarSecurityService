@model StarSecurityService.ApplicationCore.Entities.ServiceOffer

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_MainLayoutAdmin.cshtml";
}
@section style{
    <style>
        label.error {
            color: red
        }

        .font-red {
            color: red
        }

        .gallery img {
            width: 100px;
        }
    </style>
}
<br />
<div class="row">
    <div class="col-xs-12 col-md-12 col-lg-12">
        <div class="panel panel-primary">
            <div class="panel-heading">Create Service Offer</div>
            <div class="panel-body">
                <div class="row" style="margin-bottom:40px">
                    <div class="col-xs-8">
                        @using (Html.BeginForm("Create", "ServiceOffer", FormMethod.Post, new { enctype = "multipart/form-data", id = "formSerice" }))
                        {
                            @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            <h4>Service Offer</h4>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <input id="file-input" type="file" multiple name="Url">
                                    <div id="preview"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Introduce, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Introduce, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Introduce, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.Status)
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <button type="submit" class="btn btn-primary" value="Create"><i class="fa fa-floppy-o" aria-hidden="true"></i> &nbsp; Save</button>
                                </div>
                            </div>
                        </div>
                        }
                        <div>
                            @Html.ActionLink("Back to List", "Index")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div><!--/.row-->
@section scripts {
    <script src="~/Areas/Asset/js/JqueyValidate/jquery.validate.min.js"></script>
    <script src="~/Areas/Asset/ckeditor5-build-classic/ckeditor.js"></script>
    <script>
        $(function () {
            ClassicEditor
                .create(document.querySelector('#Details'))
                .then(editor => {
                    console.log(editor);
                })
                .catch(error => {
                    console.error(error);
                });
        })
        $(function () {
            ClassicEditor
                .create(document.querySelector('#Introduce'))
                .then(editor => {
                    console.log(editor);
                })
                .catch(error => {
                    console.error(error);
                });
        })
        $(function () {
            ClassicEditor
                .create(document.querySelector('#Description'))
                .then(editor => {
                    console.log(editor);
                })
                .catch(error => {
                    console.error(error);
                });
        })

        var $validateForm = {
            validate: $("#formSerice").validate({
                rules: {
                    Title: "required",
                    Details: "required",
                    Url: "required",
                    Introduce: "required",
                    Description: "required"
                },
                messages: {
                    Title: "Please enter title, can't be blank",
                    Details: "Please enter details, can't be blank",
                    Url: "Please choose url, can't be blank",
                    Introduce: "Please enter introduce, can't be blank",
                    Description: "Please enter description, can't be blank"
                },
                submitHandler: function (form) {
                    form.submit();
                }
            })
        };
        (function () { $validateForm.validate })();

        function previewImages() {

            var $preview = $('#preview').empty();
            if (this.files) $.each(this.files, readAndPreview);

            function readAndPreview(i, file) {

                if (!/\.(jpe?g|png|gif)$/i.test(file.name)) {
                    return alert(file.name + " is not an image");
                } // else...

                var reader = new FileReader();

                $(reader).on("load", function () {
                    $preview.append($("<img/>", { src: this.result, height: 100 }));
                });

                reader.readAsDataURL(file);

            }
        }
        $('#file-input').on("change", previewImages);

    </script>
}
